**Project Plan: AI-Powered Plant Health and Watering Predictor**

---

**Project Name:** PlantVision

**Objective:**
Develop a software application that uses a camera to visually assess plant health and determine whether a plant needs watering. If the plant does not need water, estimate how many days remain before the next watering is required. The system will use a plant care API and optionally integrate AI to enhance health analysis.

---

### Phase 1: Requirements & Research

**1.1 Goals**
- Capture plant images using a camera.
- Compare plant state to known healthy/unhealthy states.
- Match plant with its care profile from an external plant API.
- Determine current health and watering needs.

**1.2 Tools & Technologies**
- Programming Language: Python
- Image Processing: OpenCV
- Optional AI: TensorFlow / PyTorch
- Camera Access: OpenCV / PiCamera
- API Integration: Requests (HTTP client)
- GUI (optional): Tkinter or PyQt5

**1.3 Data Collection**
- Leverage public plant care APIs (e.g., Perenual, Trefle, OpenFarm).
- Fetch plant details like watering frequency, light requirements, and signs of distress dynamically via API.

---

### Phase 2: System Design

**2.1 System Components**
- Image Capture Module
- Health Analysis Module
- Plant Profile API Integration
- Watering Logic Engine
- (Optional) Notification/Reminder System

**2.2 Data Flow**
```
Camera --> Image Capture --> Health Analysis --> API Fetch Plant Info --> Watering Recommendation --> Output Result
```

**2.3 Example API Response (Perenual/OpenFarm)**
```json
{
  "common_name": "Aloe Vera",
  "watering": "Minimum",
  "sunlight": ["full_sun"],
  "care_guide": {
    "signs_of_thirst": ["droopy leaves", "brown tips"]
  }
}
```

---

### Phase 3: Development

**3.1 Image Capture Module**
- Use OpenCV to interface with camera.
- Save and timestamp images.

**3.2 Health Analysis Module**
- **Rule-Based**: Check for signs like discoloration or drooping.
- **AI-Based (optional)**:
  - Train CNN on labeled healthy/unhealthy plant images.
  - Classify current plant state.

**3.3 Plant Profile API Integration**
- Query API based on user-inputted or image-identified plant name.
- Parse and store key values: water needs, sun exposure, health indicators.

**3.4 Watering Logic Engine**
- Compare current state + time since last watering.
- Estimate days left using care info from API.
- Return one of: Needs Water / Water in X Days / Unhealthy (Non-Water Issue).

**3.5 Output System**
- Display on terminal or GUI:
  - "Plant is healthy. Water in 3 days."
  - "Plant needs water now."
  - "Plant shows unhealthy signs. Investigate."

---

### Phase 4: Testing & Validation

- Test on 3–5 plant species.
- Validate prediction accuracy using API data.
- Adjust image recognition and thresholds.

---

### Phase 5: Stretch Goals

- Mobile app version with phone camera integration.
- Smart sensor (soil moisture) integration.
- Automatic watering system (IoT relay + water pump).
- Reminder notification via email/text.

---

### Phase 6: Documentation & Deployment

- Write user guide.
- Document codebase and API usage.
- Package for local PC or Raspberry Pi deployment.

---

**Project Timeline Estimate:**
- Week 1: Research + Requirements Gathering
- Week 2–3: Camera Module + API Integration
- Week 4–5: Rule-Based Analysis + Watering Logic
- Week 6: Optional AI Training
- Week 7: Integration + Testing
- Week 8: Stretch Features or Final Polish

---

**Next Steps:**
- Choose which plant API to use (e.g., Perenual, Trefle).
- Set up initial API call and parse a few plant profiles.
- Begin designing rule-based health detection.
- Connect image analysis to watering logic.
